openapi: 3.0.3
info:
  title: Edusm User & Admin Management API
  version: 1.0.0
  description: API for creating users/admins, login, and role-based validation with token and superadmin_email.

servers:
  - url: https://next-js-online-learning-app.vercel.app/api
    description: Production server
  - url: http://localhost:300/api
    description: Local development server

paths:
  /admin/create:
    post:
      summary: Create a new user or admin
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                token:
                  type: string
                  description: Required if superadmin_email is present
                superadmin_email:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        '400':
          description: Validation error (missing fields)
        '403':
          description: Unauthorized (invalid token or superadmin_email)
        '409':
          description: Conflict (email already exists)

  /admin/login:
    post:
      summary: Login admin with email and password
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  role:
                    type: string
                  email:
                    type: string
        '401':
          description: Invalid credentials
        '404':
          description: User not found

  /admin/boards:
    get:
      summary: Get all education boards
      tags:
        - Boards
      responses:
        '200':
          description: List of boards
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    board_id:
                      type: integer
                    board_name:
                      type: string
                    image:
                      type: string
                    linkTo:
                      type: string

    post:
      summary: Create a new education board (superadmin token required)
      tags:
        - Boards
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                board_name:
                  type: string
                image:
                  type: string
                linkTo:
                  type: string
                token:
                  type: string
              required:
                - board_name
                - token
      responses:
        '200':
          description: Board created
        '403':
          description: Invalid superadmin token
        '400':
          description: Missing fields

    put:
      summary: Update an education board (superadmin token required)
      tags:
        - Boards
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                board_id:
                  type: integer
                board_name:
                  type: string
                image:
                  type: string
                linkTo:
                  type: string
                token:
                  type: string
              required:
                - board_id
                - token
      responses:
        '200':
          description: Board updated
        '403':
          description: Invalid token or unauthorized
        '400':
          description: Missing fields

    delete:
      summary: Delete a board by ID (superadmin token required)
      tags:
        - Boards
      parameters:
        - in: query
          name: board_id
          schema:
            type: integer
          required: true
        - in: query
          name: token
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Board deleted
        '403':
          description: Invalid token
        '400':
          description: Missing board_id or token

  /admin/classes:
    get:
      summary: Fetch all classes by Board ID
      tags:
        - Class
      parameters:
        - name: board_id
          in: query
          required: true
          description: The board ID to fetch associated classes.
          schema:
            type: string
      responses:
        '200':
          description: List of classes by board ID
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    class_id:
                      type: integer
                    class_name:
                      type: string
                    board_id:
                      type: string
        '400':
          description: Invalid or missing board_id parameter
        '500':
          description: Internal server error

    post:
      summary: Add a new class
      tags:
        - Class
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                class_name:
                  type: string
                  description: Name of the class
                board_id:
                  type: string
                  description: ID of the board
              required:
                - class_name
                - board_id
      responses:
        '200':
          description: Class added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: integer
        '401':
          description: Unauthorized (Superadmin token required)
        '500':
          description: Internal server error

    put:
      summary: Update an existing class
      tags:
        - Class
      parameters:
        - name: class_id
          in: path
          required: true
          description: The ID of the class to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                class_name:
                  type: string
                  description: Updated name of the class
              required:
                - class_name
      responses:
        '200':
          description: Class updated successfully
        '400':
          description: Missing or invalid class_id parameter
        '401':
          description: Unauthorized (Superadmin token required)
        '404':
          description: Class not found
        '500':
          description: Internal server error

    delete:
      summary: Delete a class
      tags:
        - Class
      parameters:
        - name: class_id
          in: path
          required: true
          description: The ID of the class to delete.
          schema:
            type: integer
      responses:
        '200':
          description: Class deleted successfully
        '400':
          description: Invalid or missing class_id parameter
        '401':
          description: Unauthorized (Superadmin token required)
        '500':
          description: Internal server error

  /admin/subjects:
    get:
      summary: Get all subjects by class_id
      tags:
        - Subject
      parameters:
        - name: class_id
          in: query
          required: true
          schema:
            type: string
          description: The class ID to fetch subjects for
      responses:
        '200':
          description: A list of subjects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '500':
          description: Error fetching data

    post:
      summary: Add a new subject
      tags:
        - Subject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - class_id
                - subject_name
              properties:
                class_id:
                  type: string
                subject_name:
                  type: string
      responses:
        '200':
          description: Subject added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: integer
        '401':
          description: Unauthorized
        '500':
          description: Error adding subject

    put:
      summary: Update a subject
      tags:
        - Subject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - subject_id
              properties:
                subject_id:
                  type: integer
                subject_name:
                  type: string
      responses:
        '200':
          description: Subject updated successfully
        '400':
          description: Missing subject_id
        '401':
          description: Unauthorized
        '404':
          description: Subject not found
        '500':
          description: Error updating subject

    delete:
      summary: Delete a subject
      tags:
        - Subject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - subject_id
              properties:
                subject_id:
                  type: integer
      responses:
        '200':
          description: Subject deleted successfully
        '401':
          description: Unauthorized
        '500':
          description: Error deleting subject

  /admin/chapters:
    get:
      summary: Get all chapters by subject_id
      tags:
        - Chapter
      parameters:
        - name: subject_id
          in: query
          required: true
          schema:
            type: string
          description: The subject ID to fetch chapters for
      responses:
        '200':
          description: A list of chapters
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '500':
          description: Error fetching data

    post:
      summary: Add a new chapter
      tags:
        - Chapter
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - subject_id
                - chapter_name
              properties:
                subject_id:
                  type: string
                chapter_name:
                  type: string
                summary:
                  type: string
                video_url:
                  type: string
                pdf:
                  type: string
      responses:
        '200':
          description: Chapter added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: integer
        '401':
          description: Unauthorized
        '500':
          description: Error adding chapter

    put:
      summary: Update a chapter
      tags:
        - Chapter
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - chapter_id
              properties:
                chapter_id:
                  type: integer
                chapter_name:
                  type: string
                summary:
                  type: string
                video_url:
                  type: string
                pdf:
                  type: string
      responses:
        '200':
          description: Chapter updated successfully
        '400':
          description: Missing chapter_id
        '401':
          description: Unauthorized
        '404':
          description: Chapter not found
        '500':
          description: Error updating chapter

    delete:
      summary: Delete a chapter
      tags:
        - Chapter
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - chapter_id
              properties:
                chapter_id:
                  type: integer
      responses:
        '200':
          description: Chapter deleted successfully
        '401':
          description: Unauthorized
        '500':
          description: Error deleting chapter

  /buy/chapter:
    post:
      summary: Add or update or deactivate chapter
      operationId: addOrUpdateDeactiveChapter
      tags:
        - Buy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - chapter_id
                - subject_id
                - user_id
                - purchase_date
                - validity
                - token
                - email
                - user_type
                - task_type
              properties:
                chapter_id:
                  type: integer
                  example: 1
                subject_id:
                  type: integer
                  example: 1
                user_id:
                  type: string
                  example: "user@example.com"
                purchase_date:
                  type: string
                  format: date
                  example: "2025-04-21 14:19:20"
                validity:
                  type: integer
                  example: 180
                token:
                  type: string
                  example: "abc123securetoken"
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                user_type:
                  type: string
                  example: "super_admin"
                task_type:
                  type: string
                  example: ""
      responses:
        '200':
          description: Chapter purchase updated successfully
        '409':
          description: Chapter added successfully
        '400':
          description: Invalid user input
        '403':
          description: Token verification failed
        '500':
          description: Server error

  /buy/subject:
    post:
      summary: Add or update or deactivate Subject
      operationId: addOrUpdateDeactiveSubject
      tags:
        - Buy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - subject_id
                - class_id
                - user_id
                - purchase_date
                - validity
                - token
                - email
                - user_type
                - task_type
              properties:
                subject_id:
                  type: integer
                  example: 1
                class_id:
                  type: integer
                  example: 1
                user_id:
                  type: string
                  example: "user@example.com"
                purchase_date:
                  type: string
                  format: date
                  example: "2025-04-21 14:19:20"
                validity:
                  type: integer
                  example: 180
                token:
                  type: string
                  example: "abc123securetoken"
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                user_type:
                  type: string
                  example: "super_admin"
                task_type:
                  type: string
                  example: ""
      responses:
        '200':
          description: Subject updated successfully
        '409':
          description: Subject added successfully
        '400':
          description: Invalid user input
        '403':
          description: Token verification failed
        '500':
          description: Server error

  /buy/class:
    post:
      summary: Add or update or deactivate Class
      operationId: addOrUpdateDeactiveClass
      tags:
        - Buy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - class_id
                - user_id
                - purchase_date
                - validity
                - token
                - email
                - user_type
                - task_type
              properties:
                class_id:
                  type: integer
                  example: 1
                user_id:
                  type: string
                  example: "user@example.com"
                purchase_date:
                  type: string
                  format: date
                  example: "2025-04-21 14:19:20"
                validity:
                  type: integer
                  example: 180
                token:
                  type: string
                  example: "abc123securetoken"
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                user_type:
                  type: string
                  example: "super_admin"
                task_type:
                  type: string
                  example: ""
      responses:
        '200':
          description: Subject updated successfully
        '409':
          description: Subject added successfully
        '400':
          description: Invalid user input
        '403':
          description: Token verification failed
        '500':
          description: Server error

  /user/create:
    post:
      summary: Create user
      operationId: CreateUser
      description: Create a user with email, password, and role.
      tags:
        - User 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - role
              properties:
                email:
                  type: string
                  format: email
                  example: "ps@gmail.com"
                password:
                  type: string
                  example: 123
                role:
                  type: string
                  enum: [user, sub_admin]
                  example: user
      responses:
        '200':
          description: User Created successful
        '400':
          description: Missing email or password
        '401':
          description: Invalid credentials
        '500':
          description: Internal server error

  /user/login:
    post:
      summary: Login user or sub_admin
      operationId: LoginUser
      description: Authenticates a user with email, password, and role.
      tags:
        - User 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - role
              properties:
                email:
                  type: string
                  format: email
                  example: "ps@gmail.com"
                password:
                  type: string
                  example: 123
                role:
                  type: string
                  enum: [user, sub_admin]
                  example: user
      responses:
        '200':
          description: User login successful
        '400':
          description: Missing email or password
        '401':
          description: Invalid credentials
        '500':
          description: Internal server error

  /user/buy/chapter:
    post:
      summary: chapter purchase
      tags:
        - Purchase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - chapter_id
                - subject_id
                - user_id
                - purchase_date
                - validity
                - token
                - email
                - user_type
              properties:
                chapter_id:
                  type: integer
                  example: 1
                subject_id:
                  type: integer
                  example: 2
                user_id:
                  type: integer
                  example: 10
                purchase_date:
                  type: string
                  format: date
                  example: "2025-04-22"
                validity:
                  type: integer
                  example: 30
                token:
                  type: string
                  example: "superadmin_token_123"
                email:
                  type: string
                  format: email
                  example: "admin@example.com"
                user_type:
                  type: string
                  example: "superadmin"
                task_type:
                  type: string
                  enum: [update, null]
                  example: "update"
      responses:
        '200':
          description: Chapter updated successfully
        '400':
          description: Bad request or already purchased
        '403':
          description: Invalid or expired token
        '409':
          description: Chapter added successfully
        '500':
          description: Server error

  /user/buy/subject:
    post:
      summary: subject purchase
      tags:
        - Purchase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - subject_id
                - class_id
                - user_id
                - purchase_date
                - validity
                - token
                - email
                - user_type
              properties:
                subject_id:
                  type: integer
                  example: 5
                class_id:
                  type: integer
                  example: 10
                user_id:
                  type: integer
                  example: 3
                purchase_date:
                  type: string
                  format: date
                  example: "2025-04-22"
                validity:
                  type: integer
                  example: 30
                token:
                  type: string
                  example: "superadmin_token_123"
                email:
                  type: string
                  format: email
                  example: "admin@example.com"
                user_type:
                  type: string
                  example: "superadmin"
                task_type:
                  type: string
                  enum: [update, null]
                  example: "update"
      responses:
        '200':
          description: Subject updated successfully
        '400':
          description: Bad request or already purchased
        '403':
          description: Invalid or expired token
        '409':
          description: Subject added successfully
        '500':
          description: Server error

  /user/buy/class:
    post:
      summary: class purchase
      tags:
        - Purchase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - class_id
                - user_id
                - purchase_date
                - validity
                - token
                - email
                - user_type
              properties:
                class_id:
                  type: integer
                  example: 101
                user_id:
                  type: integer
                  example: 10
                purchase_date:
                  type: string
                  format: date
                  example: "2025-04-22"
                validity:
                  type: integer
                  example: 30
                token:
                  type: string
                  example: "superadmin_token_123"
                email:
                  type: string
                  format: email
                  example: "admin@example.com"
                user_type:
                  type: string
                  example: "superadmin"
                task_type:
                  type: string
                  enum: [update, null]
                  example: "update"
      responses:
        '200':
          description: Class updated successfully
        '400':
          description: Bad request or already purchased
        '403':
          description: Invalid or expired token
        '409':
          description: Class added successfully
        '500':
          description: Server error


  /user/fetch/questionAns:
    get:
      summary: Fetch all questions and answers for a chapter by chapter ID
      tags:
        - Fetch
      parameters:
        - name: chapter_id
          in: query
          required: true
          schema:
            type: integer
            example: 101
          description: The ID of the chapter to fetch questions and answers for
      responses:
        '200':
          description: Successfully fetched questions and answers for the chapter
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    question_id:
                      type: integer
                      example: 1
                    question:
                      type: string
                      example: "What is the capital of France?"
                    option_a:
                      type: string
                      example: "Berlin"
                    option_b:
                      type: string
                      example: "Madrid"
                    option_c:
                      type: string
                      example: "Paris"
                    option_d:
                      type: string
                      example: "Rome"
                    correct_option:
                      type: string
                      example: "option_c"
        '400':
          description: Bad Request (Invalid `chapter_id` or missing parameter)
        '500':
          description: Server error

  /user/fetch/chapter:
    post:
      summary: Fetch chapter details and assessments
      tags:
        - Fetch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - chapter_id
                - subject_id
                - user_id
                - token
                - email
              properties:
                chapter_id:
                  type: integer
                  example: 101
                subject_id:
                  type: integer
                  example: 10
                user_id:
                  type: integer
                  example: 5
                token:
                  type: string
                  example: "superadmin_token_123"
                email:
                  type: string
                  format: email
                  example: "admin@example.com"
      responses:
        '200':
          description: Successfully fetched chapter and assessments
        '400':
          description: Invalid user (missing token or email)
        '403':
          description: Invalid or expired token
        '404':
          description: Chapter not found
        '500':
          description: Server error

  /user/fetch/subject:
    post:
      summary: Fetch subject details for a user
      tags:
        - Fetch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - subject_id
                - user_id
                - token
                - email
              properties:
                subject_id:
                  type: integer
                  example: 10
                user_id:
                  type: integer
                  example: 5
                token:
                  type: string
                  example: "superadmin_token_123"
                email:
                  type: string
                  format: email
                  example: "admin@example.com"
      responses:
        '200':
          description: Successfully fetched subject details
        '400':
          description: Invalid user (missing token or email)
        '403':
          description: Invalid or expired token
        '404':
          description: Subject not found
        '500':
          description: Server error

  /user/fetch/class:
    post:
      summary: Fetch class details for a user
      tags:
        - Fetch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - class_id
                - user_id
                - token
                - email
              properties:
                class_id:
                  type: integer
                  example: 101
                user_id:
                  type: integer
                  example: 5
                token:
                  type: string
                  example: "superadmin_token_123"
                email:
                  type: string
                  format: email
                  example: "admin@example.com"
      responses:
        '200':
          description: Successfully fetched class details
        '400':
          description: Invalid user (missing token or email)
        '403':
          description: Invalid or expired token
        '404':
          description: Class not found
        '500':
          description: Server error